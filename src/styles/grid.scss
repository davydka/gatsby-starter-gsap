$grid-gutter-widths: (
  xs: $grid-gap-xs,
  sm: $grid-gap-sm,
  md: $grid-gap-md,
  lg: $grid-gap-lg,
  xl: $grid-gap-xl,
);

$grid-breakpoints: (
  // Extra small screen / phone
  xs: 0,
  // Small screen / phone
  sm: $bp-small,
  // Medium screen / tablet
  md: $bp-medium,
  // Large screen / desktop
  lg: $bp-large,
  // Extra large screen / wide desktop
  xl: $bp-extra-large
);

$container-max-widths: (
  sm: 540px,
  md: 720px,
  lg: 960px,
  xl: 1140px
);

/// Grid system
//
// Generate semantic grid columns with these mixins.

@mixin make-container($gutter: $grid-gutter-width) {
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
  margin-right: auto;
  margin-left: auto;
}


// For each breakpoint, define the maximum width of the container in a media query
@mixin make-container-max-widths($max-widths: $container-max-widths, $breakpoints: $grid-breakpoints) {
  @each $breakpoint, $container-max-width in $max-widths {
    @include media-breakpoint-up($breakpoint, $breakpoints) {
      max-width: $container-max-width;
    }
  }
}

@mixin make-row($gutter: $grid-gutter-width) {
  display: flex;
  flex-wrap: wrap;
  margin-right: -$gutter / 2;
  margin-left: -$gutter / 2;
}

@mixin make-col-ready($gutter: $grid-gutter-width) {
  position: relative;
  // Prevent columns from becoming too narrow when at smaller grid tiers by
  // always setting `width: 100%;`. This works because we use `flex` values
  // later on to override this initial width.
  width: 100%;
  padding-right: $gutter / 2;
  padding-left: $gutter / 2;
}

@mixin make-col($size, $columns: $grid-columns) {
  flex: 0 0 percentage($size / $columns);
  // Add a `max-width` to ensure content within each column does not blow out
  // the width of the column. Applies to IE10+ and Firefox. Chrome and Safari
  // do not appear to require this.
  max-width: percentage($size / $columns);
}

@mixin make-col-offset($size, $columns: $grid-columns) {
  $num: $size / $columns;
  margin-left: if($num == 0, 0, percentage($num));
}





@mixin grid-column($gutter) {
  position: relative;
  width: 100%;
  min-height: 1px; // Prevent columns from collapsing when empty
  padding-right: ($gutter / 2);
  padding-left: ($gutter / 2);
}

@mixin make-custom-grid-columns($prefix: '', $columns: $grid-columns, $gutter: $grid-gutter-width, $breakpoints: $grid-breakpoints) {
  @each $breakpoint in map-keys($breakpoints) {
    $infix: breakpoint-infix($breakpoint, $breakpoints);

    @for $i from 1 through $columns {
      .col#{$prefix}#{$infix}-#{$i} {
        @include grid-column($gutter)
      }
    }
    .col#{$infix},
    .col#{$infix}-auto {
      @include grid-column($gutter)
    }

    @include media-breakpoint-up($breakpoint, $breakpoints) {
      // Provide basic `.col-{bp}` classes for equal-width flexbox columns
      .col#{$prefix}#{$infix} {
        flex-basis: 0;
        flex-grow: 1;
        max-width: 100%;
      }
      .col#{$prefix}#{$infix}-auto {
        flex: 0 0 auto;
        width: auto;
        max-width: 100%; // Reset earlier grid tiers
      }

      @for $i from 1 through $columns {
        .col#{$prefix}#{$infix}-#{$i} {
          @include make-col($i, $columns);
        }
      }

      .order#{$infix}-first { order: -1; }

      .order#{$infix}-last { order: $columns + 1; }

      @for $i from 0 through $columns {
        .order#{$prefix}#{$infix}-#{$i} { order: $i; }
      }

      // `$columns - 1` because offsetting by the width of an entire row isn't possible
      @for $i from 0 through ($columns - 1) {
        @if not ($infix == "" and $i == 0) { // Avoid emitting useless .offset-0
          .offset#{$prefix}#{$infix}-#{$i} {
            @include make-col-offset($i, $columns);
          }
        }
      }
    }
  }
}

@each $grid-breakpoint, $grid-gutter-width in $grid-gutter-widths {
  @include media-breakpoint-up($grid-breakpoint) {
    $grid-gutter-half-width: $grid-gutter-width / 2;
    .row:not(.no-gutters) {
      margin-right: -$grid-gutter-half-width;
      margin-left: -$grid-gutter-half-width;
    }
    .row:not(.no-gutters) > .col,
    .row:not(.no-gutters) > [class*="col-"] {
      padding-right: $grid-gutter-half-width;
      padding-left: $grid-gutter-half-width;
    }
  }
}

@include extraLargeOnly {
  @include make-custom-grid-columns('-xl', $grid-columns-xl, $grid-gap-xl, ( xs: 0, xl: $bp-extra-large ));
}

@include largeOnly {
  @include make-custom-grid-columns('-lg', $grid-columns-lg, $grid-gap-lg, ( xs: 0, lg: $bp-large ));
}

@include mediumOnly {
  @include make-custom-grid-columns('-md', $grid-columns-md, $grid-gap-md, ( xs: 0, lg: $bp-medium ));
}

@include smallOnly {
  @include make-custom-grid-columns('-sm', $grid-columns-sm, $grid-gap-sm, ( xs: 0, lg: $bp-small ));
}

@include extraSmallOnly {
  @include make-custom-grid-columns('-xs', $grid-columns-xs, $grid-gap-xs, ( xs: 0, lg: $bp-small - 1 ));
}
